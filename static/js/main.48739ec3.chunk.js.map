{"version":3,"sources":["component/ClickyGame.js","App.js","serviceWorker.js","index.js"],"names":["ClickyGame","state","friendData","currentScore","highestScore","feedback","handleClick","cardId","isCorrect","Object","toConsumableArray","_this","forEach","card","id","clicked","cardCorrect","cardIncorrect","shuffledCards","sort","Math","random","highestScoreScore","setState","_this2","this","react_default","a","createElement","Fragment","className","map","key","src","image","alt","name","onClick","Component","App","component_ClickyGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAsGeA,oNAhGbC,MAAQ,CACNC,aACAC,aAAc,EACdC,aAAc,EACdC,SAAU,8BAGZC,YAAc,SAAAC,GAEZ,IAAIC,GAAY,EACVN,EAAUO,OAAAC,EAAA,EAAAD,CAAOE,EAAKV,MAAMC,YAGlCA,EAAWU,QAAQ,SAAAC,GACbA,EAAKC,KAAOP,IACTM,EAAKE,UACRP,GAAY,EACZK,EAAKE,SAAU,MAMrBP,EAAYG,EAAKK,YAAYd,GAAcS,EAAKM,cAAcf,MAGjEc,YAAc,SAAAd,GAEX,IAAMgB,EAAgBhB,EAAWiB,KAAK,iBAAM,GAAMC,KAAKC,WACjDlB,EAAeQ,EAAKV,MAAME,aAAe,EAC1CmB,EAAoBX,EAAKV,MAAMqB,kBAEhCnB,EAAemB,IACjBA,EAAoBnB,GAGtBQ,EAAKY,SAAS,CACZrB,WAAYgB,EACZf,aAAcA,EACdE,SAAU,0DAEViB,kBAAmBA,OAIvBL,cAAgB,SAAAf,GACd,IAAMgB,EAAgBhB,EAAWiB,KAAK,iBAAM,GAAMC,KAAKC,WAIvDH,EAAcN,QAAQ,SAAAC,GAAI,OAAKA,EAAKE,SAAU,IAE9CJ,EAAKY,SAAS,CACZrB,WAAYgB,EACZb,SAAU,+CAEVF,aAAc,6EAIT,IAAAqB,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8DACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,qBAAhB,eACAJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,wBACfL,KAAKxB,MAAMI,SADZ,uBAEkBoB,KAAKxB,MAAME,aAF7B,sBAE8DsB,KAAKxB,MAAMG,aAFzE,QAKFsB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BACbJ,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,iFAEFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kDAEZL,KAAKxB,MAAMC,WAAW6B,IAAI,SAAAlB,GACzB,OACEa,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BAA2BE,IAAKnB,EAAKC,IAClDY,EAAAC,EAAAC,cAAA,OACEK,IAAKpB,EAAKqB,MACVC,IAAKtB,EAAKuB,KACVN,UAAU,8CACVO,QAAS,kBAAMb,EAAKlB,YAAYO,EAAKC,oBArFhCwB,cCEVC,SAFH,kBAAMb,EAAAC,EAAAC,cAACY,EAAD,QCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.48739ec3.chunk.js","sourcesContent":["// import \nimport React, { Component } from 'react';\nimport friendData from '../friends.json';\nimport \"./App.css\";\n\nclass ClickyGame extends Component {\n  state = {\n    friendData,\n    currentScore: 0,\n    highestScore: 0,\n    feedback: \"Click an image to begin!\"\n  };\n\n  handleClick = cardId => {\n    \n    let isCorrect = false;\n    const friendData = [...this.state.friendData];\n\n    \n    friendData.forEach(card => {\n      if (card.id === cardId) {\n        if (!card.clicked) {\n          isCorrect = true;\n          card.clicked = true;\n        }\n      }\n    });\n\n    \n    isCorrect ? this.cardCorrect(friendData) : this.cardIncorrect(friendData);\n  };\n\n cardCorrect = friendData => {\n    \n    const shuffledCards = friendData.sort(() => 0.5 - Math.random());\n    const currentScore = this.state.currentScore + 1;\n     let highestScoreScore = this.state.highestScoreScore;\n\n    if (currentScore > highestScoreScore) {\n      highestScoreScore = currentScore;\n    }\n\n    this.setState({\n      friendData: shuffledCards,\n      currentScore: currentScore,\n      feedback: \"Congrats! You Have Guessed All Of The Images Correctly!\",\n\n      highestScoreScore: highestScoreScore\n    });\n  };\n\n  cardIncorrect = friendData => {\n    const shuffledCards = friendData.sort(() => 0.5 - Math.random());\n\n\n\n    shuffledCards.forEach(card => (card.clicked = false));\n\n    this.setState({\n      friendData: shuffledCards,\n      feedback: \"Game Over! You Guessed The Same Image Twice!\",\n\n      currentScore: 0,\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-dark bg-warning d-flex justify-space-between\">\n          <span className=\"navbar-brand mb-0\">Clicky Game</span>\n          <span className=\"scoreInfo text-light\">\n          {this.state.feedback}  || \n            Current Score: {this.state.currentScore} || Highest Score: {this.state.highestScore} || \n          </span>\n        </nav>\n        <div className=\" text-light text-center\">\n          <h1>Welcome to the clicky game!</h1>\n          <p>Click on a card to get started. Don't click on the same card twice.</p>\n        </div>\n        <div className=\"container-fluid\">\n          <div className=\"row align-items-center justify-content-between\">\n\n            {this.state.friendData.map(card => {\n              return (\n                <div className=\"col-12 col-sm-4 col-md-4\" key={card.id}>\n                  <img\n                    src={card.image}\n                    alt={card.name}\n                    className=\"img-fluid img-thumbnail rounded-circle  img\"\n                    onClick={() => this.handleClick(card.id)}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ClickyGame;","import React from 'react';\nimport ClickyGame from './component/ClickyGame';\nimport \"./App.css\";\n\n\nconst App = () => <ClickyGame/>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}